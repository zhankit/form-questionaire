# This is a basic workflow to help you get started with Actions

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      version_name:
        # i.e. v3.0.0, v7.39.0-rc1
        description: 'Version of the release candidate build (RC)'
        required: true
      release_thread_id:
        description: 'ID of the release discussion thread on the repo'
        required: true
      conflunece_release_note:
        description: 'Confleunce Release note URL'
        required: true
        

name: RC Release

jobs:
  build:
    name: RC Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Echo site details
        env:
          SITE: ${{ matrix.site }}
          DATACENTER: ${{ matrix.datacenter }}
        run: 
          #!/bin/bash

          # current Git branch
          branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')

          # current project name
          projectName=$(git config --local remote.origin.url|sed -n 's#.*/\([^.]*\)\.git#\1#p')

          # establish master branch name variables
          masterBranch=$branch

          # checkout to master branch, this will break if the user has uncommited changes
          git checkout $masterBranch

          # master branch validation
          if [ $branch = "master" ]; then
            echo "Enter the release version number"

            read versionNumber

            # v1.0.0, v1.7.8, etc..
            versionLabel=v$versionNumber

            # establish branch and tag name variables
            releaseBranch=$versionNumber
            tagName=$versionLabel

            echo "Started releasing $versionLabel for $projectName ....."

            # pull the latest version of the code from master
            git pull

            # create empty commit from master branch
            git commit --allow-empty -m "Creating Branch $releaseBranch"

            # create tag for new version from -master
            git tag $tagName

            # push commit to remote origin
            git push

            # push tag to remote origin
            git push --tags origin 

            # create the release branch from the -master branch
            git checkout -b $releaseBranch $masterBranch

            # push local releaseBranch to remote
            git push -u origin $releaseBranch

            echo "$versionLabel is successfully released for $projectName ...."
            echo "Checking out into $masterBranch again, where it all started...... :)"

            # checkout to master branch
            git checkout $masterBranch

            # pull the latest version of the code from master
            git pull

            echo "Enter new version number for $projectName"	
            read newVersionNumer

            # Update Maven version to next release number
            mvn versions:set -DnewVersion=$newVersionNumer -DgenerateBackupPoms=false

            # Commit setting new master branch version	
            git commit -a -m "Setting master branch version to $newVersionNumer"

            # push commit to remote origin
            git push

            echo "Maven POM File Version is set to new version $newVersionNumer"	
            echo "Bye!"
          else 
            echo "Please make sure you are on master branch and come back!"
            echo "Bye!"
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          repository: release/${{ github.event.inputs.version_name }}
          tag_name: release-${{ github.event.inputs.version_name }}
          release_name: v${{ github.event.inputs.version_name }}
          body: |
            Release notes:
            ${{ github.event.inputs.conflunece_release_note }}
            
            Release thread:
            https://github.com/MoneyLion/mobile-app/discussions/${{ github.event.inputs.release_thread_id }}
          draft: true
          prerelease: false
