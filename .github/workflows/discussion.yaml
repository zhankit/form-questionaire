# This is a basic workflow to help you get started with Actions

 name: Discussion Thread

 # Controls when the workflow will run
 on:
   workflow_dispatch:
     inputs:
       version_name:
         description: 'Version name of the release candidate build'
         required: false

 # A workflow run is made up of one or more jobs that can run sequentially or in parallel
 jobs:
   check_new_fixes:
     name: 'To create new discussion for RC'
     runs-on: ubuntu-latest
     steps:
     
      # 1. Get discussion list in this repository
       - uses: octokit/graphql-action@v2.x
         id: get_discussion_id
         with:
           query: |
             query discussion($owner: String!, $repo:String!) {
               repository(owner: $owner, name: $repo) {
                 discussionCategories(first: 10) {
                   nodes {
                     # type: Discussion
                     id
                     name
                   }
                 }
               }
             }
           owner: "zhankit"
           repo: ${{ github.event.repository.name }}
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

       # 2. Get Repository ID
       - uses: octokit/graphql-action@v2.x
         id: get_repo_id
         with:
           query: |
             query repo($owner: String!, $repo:String!) {
               repository(owner: $owner, name: $repo) {
                 id
               }
             }
           owner: "zhankit"
           repo: ${{ github.event.repository.name }}
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           
       # 3. Data Processing
       - name: Set the value
         id: step_one
         run: |
           # Loop to find the discussionID
           echo $DISCUSSION_LIST
           for item in $DISCUSSION_LIST; do
             echo $item
             # if found then store in the environment
             # echo 'JSON_RESPONSE<<EOF' >> $GITHUB_ENV2
           done
           
           echo api response: ${{ steps.get_release_thread.outputs.data }}
           # This is to find the differences of the item
         env:
           DISCUSSION_LIST: ${{ fromJson(steps.get_repo_id.outputs.data) }}

 
       # 4. Create discussion
       - uses: octokit/graphql-action@v2.x
         id: get_release_thread
         with:
           query: |
             mutation newDiscussion($repositoryId: String!, $categoryId: String!, $body: String!, $title: String! ){
               # input type: CreateDiscussionInput
               createDiscussion(input: {repositoryId: $repositoryId, categoryId: $categoryId, body: $body, title: $title}) {

                 # response type: CreateDiscussionPayload
                 discussion {
                   id
                 }
               }
             }
           repositoryId: "${{ fromJson(steps.get_repo_id.outputs.data).repository.id }}"
           categoryId: "DIC_kwDOFW434s4CATF2"
           body: "Sample Title"
           title: "Sameple Body"
           
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           
           
       - run: "echo api response: ${{ steps.get_release_thread.outputs.data }}"
